#!/bin/bash
# cryption.sh: command line for quick encryption/decryption
usage() {
	echo "Usage: cryption filename [-e|-d|-o|-v]"
	exit 1
}

is_file_exits() {
	local f="$1"
	[[ -f "$f" ]] && return 0 || return 1
}

[[ $# -eq 0 ]] && usage

FILE=$2
EXT=enc
MODE=v

# Check -d argument
while getopts "vedo" opt
do
	case $opt in
		e)
			EXT=enc
			MODE=e
			;;
		d)
			EXT=dec
			MODE=d
			;;
		o)
			MODE=o
			;;
		v)
			MODE=v
			;;
		*)
			echo "Invalid option!"
			exit 1
			;;
	esac
done

OUT=$FILE.$EXT

if ( is_file_exits "$FILE" )
then
	case $MODE in
	o)
		echo "We'll open the file for editing." >&2
		echo "Decrypting $FILE..."

		TEMP=`basename $FILE`
		tmp=`mktemp ./tmp_${TEMP}.XXXXX` || exit 1

		# get password
		stty -echo
		read -p "Password: " passw; echo
		stty echo

		echo "$passw" | openssl enc -d -aes-256-cbc -salt -in $FILE -out $tmp -pass stdin || exit 1

		# Vim: no swapfiles or viminfo
		eval "$EDITOR -n -i NONE \"$tmp\""

		echo "$passw" | openssl enc -e -aes-256-cbc -salt -in $tmp -out $FILE -pass stdin || exit 1

		echo "File saved and reencrypted!"

		rm $tmp
		;;
	v)
		echo "We'll open the file for viewing." >&2
		echo "Decrypting $FILE..."

		# get password
		stty -echo
		read -p "Password: " passw; echo
		stty echo

		# Decrypt and open in less
		echo "$passw" | openssl enc -d -aes-256-cbc -salt -in $FILE -pass stdin | less -R
		;;
	*)
		echo "We'll ${EXT}rypt the file." >&2
		echo "${EXT}rypting $1..."

		openssl enc -$MODE -aes-256-cbc -salt -in $FILE -out $OUT
		;;
	esac
else
	echo "File not found!"
fi


